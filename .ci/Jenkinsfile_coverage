#!/bin/groovy

library 'kibana-pipeline-library'
kibanaLibrary.load() // load from the Jenkins instance

kibanaPipeline(timeoutMinutes: 180) {
  catchErrors {
    withEnv([
      'CODE_COVERAGE=1', // Needed for multiple ci scripts, such as remote.ts, test/scripts/*.sh, schema.js, etc.
    ]) {
      parallel([
        'kibana-intake-agent': workers.intake('kibana-intake', './test/scripts/jenkins_unit.sh'),
         'x-pack-intake-agent': {
           withEnv([
             'NODE_ENV=test' // Needed for jest tests only
           ]) {
             workers.intake('x-pack-intake', './test/scripts/jenkins_xpack.sh')()
           }
         },
        'kibana-oss-agent': workers.functional('kibana-oss-tests', { kibanaPipeline.buildOss() }, [
          'oss-ciGroup1': kibanaPipeline.ossCiGroupProcess(1),
           'oss-ciGroup2': kibanaPipeline.ossCiGroupProcess(2),
           'oss-ciGroup3': kibanaPipeline.ossCiGroupProcess(3),
           'oss-ciGroup4': kibanaPipeline.ossCiGroupProcess(4),
           'oss-ciGroup5': kibanaPipeline.ossCiGroupProcess(5),
           'oss-ciGroup6': kibanaPipeline.ossCiGroupProcess(6),
           'oss-ciGroup7': kibanaPipeline.ossCiGroupProcess(7),
           'oss-ciGroup8': kibanaPipeline.ossCiGroupProcess(8),
           'oss-ciGroup9': kibanaPipeline.ossCiGroupProcess(9),
           'oss-ciGroup10': kibanaPipeline.ossCiGroupProcess(10),
           'oss-ciGroup11': kibanaPipeline.ossCiGroupProcess(11),
           'oss-ciGroup12': kibanaPipeline.ossCiGroupProcess(12),
        ]),
         'kibana-xpack-agent': workers.functional('kibana-xpack-tests', { kibanaPipeline.buildXpack() }, [
           'xpack-ciGroup1': kibanaPipeline.xpackCiGroupProcess(1),
           'xpack-ciGroup2': kibanaPipeline.xpackCiGroupProcess(2),
           'xpack-ciGroup3': kibanaPipeline.xpackCiGroupProcess(3),
           'xpack-ciGroup4': kibanaPipeline.xpackCiGroupProcess(4),
           'xpack-ciGroup5': kibanaPipeline.xpackCiGroupProcess(5),
           'xpack-ciGroup6': kibanaPipeline.xpackCiGroupProcess(6),
           'xpack-ciGroup7': kibanaPipeline.xpackCiGroupProcess(7),
           'xpack-ciGroup8': kibanaPipeline.xpackCiGroupProcess(8),
           'xpack-ciGroup9': kibanaPipeline.xpackCiGroupProcess(9),
           'xpack-ciGroup10': kibanaPipeline.xpackCiGroupProcess(10),
         ]),
      ])
      workers.base(name: 'coverage-worker', label: 'tests-l', ramDisk: false, bootstrapped: false) {
        kibanaPipeline.downloadCoverageArtifacts()

        def timestamp = new Date(currentBuild.startTimeInMillis).format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
        withEnv([
          "TIME_STAMP=${timestamp}",
          "LIVE_APP_PATH=live_cc_app"
        ]) {
          kibanaPipeline.bash(
            """
            source src/dev/ci_setup/setup_env.sh

            # bootstrap from x-pack folder
            cd x-pack
            yarn kbn bootstrap --prefer-offline

            # Return to project root
            cd ..

            . src/dev/code_coverage/shell_scripts/extract_archives.sh

            . src/dev/code_coverage/shell_scripts/fix_html_reports_parallel.sh

            . src/dev/code_coverage/shell_scripts/merge_jest_and_functional.sh

            . src/dev/code_coverage/shell_scripts/copy_mocha_reports.sh

            . src/dev/code_coverage/shell_scripts/ingest_coverage.sh ${BUILD_NUMBER} ${env.BUILD_URL}

            # Bootstrap, Populate, Build and Deploy the CC App
            . src/dev/code_coverage/shell_scripts/deploy_cc_app.sh

          """,
            "### Run `yarn kbn bootstrap && merge coverage` AND Ingest Code Coverage to ES Cluster AND Boot Coverage App"
          )
          kibanaPipeline.bash(
            """
            echo "### Canonical TIME_STAMP for the build and ingestion: ${TIME_STAMP}"

            """,
            "### About to Upload Code Coverage Static Site"
          )
          kibanaCoverage.uploadCoverageStaticSite(TIME_STAMP, LIVE_APP_PATH)
        }

        sh 'tar -czf kibana-jest-coverage.tar.gz target/kibana-coverage/jest-combined/*'
        kibanaPipeline.uploadCoverageArtifacts("coverage/jest-combined", 'kibana-jest-coverage.tar.gz')
        sh 'tar -czf kibana-functional-coverage.tar.gz target/kibana-coverage/functional-combined/*'
        kibanaPipeline.uploadCoverageArtifacts("coverage/functional-combined", 'kibana-functional-coverage.tar.gz')
        sh 'tar -czf kibana-mocha-coverage.tar.gz target/kibana-coverage/mocha-combined/*'
        kibanaPipeline.uploadCoverageArtifacts("coverage/mocha-combined", 'kibana-mocha-coverage.tar.gz')
      }
    }
  }
  kibanaPipeline.sendMail()
}
